import numpy as np

def determinant_recursive(matrix):
    # Рекурсивно вычисляем определитель матрицы
    if matrix.shape == (1, 1):
        return matrix[0, 0]
    else:
        det = 0
        for i in range(matrix.shape[0]):
            submatrix = np.delete(matrix, i, axis=0)
            submatrix = np.delete(submatrix, 0, axis=1)
            det += ((-1) ** i) * matrix[i, 0] * determinant_recursive(submatrix)
        return det

def calculate_sum(x, k, t):
    sum_value = 0.0
    n = 1
    term = (-1) ** (n - 1) * determinant_recursive(x ** (n - 1)) / np.math.factorial(n - 1)

    while abs(term) >= 10 ** -t:
        sum_value += term
        n += 1
        term = (-1) ** (n - 1) * determinant_recursive(x ** (n - 1)) / np.math.factorial(n - 1)

    return round(sum_value, t)

def main():
    # Ввод параметров
    k = int(input("Введите ранг матрицы k: "))
    t = int(input("Введите точность t: "))

    # Генерация матрицы
    x = np.random.uniform(-1, 1, (k, k))

    # Вычисление и вывод определителя матрицы
    det_value = determinant_recursive(x)
    print(f"Определитель матрицы x:\n{det_value}")

    # Вычисление и вывод суммы
    sum_value = calculate_sum(x, k, t)
    print(f"Сумма знакопеременного ряда: {sum_value}")

if __name__ == "__main__":
    main()


