import numpy as np

def factorial(n):
    """Вычисляет факториал числа n."""
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

def alternating_series(x, n):
    """Вычисляет значение знакопеременного ряда для заданных x и n."""
    return (-1)**(n - 1) * (x**(n - 1)) / factorial(n - 1)

def determinant_and_sum(k, t):
    """Вычисляет определитель матрицы и сумму знакопеременного ряда с заданной точностью."""
    
    # Генерация матрицы размера k x k со значениями от -1 до 1
    matrix = np.random.uniform(-1, 1, size=(k, k))
    
    # Вычисление определителя матрицы
    det = np.linalg.det(matrix)
    
    # Инициализация суммы и текущего слагаемого
    series_sum = 0
    current_term = alternating_series(det, 1)
    
    # Итеративное вычисление суммы с учетом точности t
    n = 1
    while abs(current_term) >= 10**(-t):
        series_sum += current_term
        n += 1
        current_term = alternating_series(det, n)
    
    return det, series_sum

# Ввод значения k (размер матрицы) и t (точность)
k = int(input("Введите размер матрицы k: "))
t = int(input("Введите точность t (количество знаков после запятой): "))

# Вычисление определителя матрицы и суммы ряда
det, series_sum = determinant_and_sum(k, t)

# Вывод результатов
print(f"Определитель матрицы:\n{det}")
print(f"Сумма знакопеременного ряда с точностью {t} знаков после запятой:\n{series_sum:.{t}f}")

